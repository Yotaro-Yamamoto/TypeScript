//プロパティとコンストラクタ
//プロパティとアクセス制限
/*クラスのプロパティにアクセス修飾子(private/protected/public)
　をつけると、プロパティを参照できる範囲を制限することができる。*/

//private
/*privateアクセス修飾子をつけたプロパティは、そのクラス以外から
　直接アクセスすることができなくなる*/

//protected
/*protectedアクセス修飾子をつけたプロパティは、そのクラスを継承した
　サブクラスと、そのクラス以外から直接アクセスすることができ
　なくなる。*/

//public
/*publicアクセス修飾子をつけたプロパティは、どこからでもアクセス可能になる。
　アクセス修飾子を省略するとpublicを指定したことになる。*/

//コンストラクタ
/*クラスのプロパティはコンストラクタで初期化(初期値を代入)する。そのため、
　コンストラクタの引数には、プロパティに適切な初期値を与えるために必要な
　情報を渡す。*/
/*書式
constructor(引数:型注釈){
    this.プロパティ名 = 引数;
}

クラス内のthisは(一部例外を除き)インスタンス自身を指す。次のコードは、初期化の
　失敗例である。コンストラクタ内の変数_flavorにはthisがついていないため、コン
　パイラはコンストラクタ内(関数スコープ)で宣言された変数を探すが、存在しないため、
　エラーになる。正しくはthis._flavorとなる。*/
class Drink{
    private _name:string
    private _flavor:string;
    constructor(name:string,flavor:string){
        this._name = name;
        //_flavor = flavor; //コンパイルエラー
        this._flavor = flavor;//〇
    }
}