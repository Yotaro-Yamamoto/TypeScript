//インターフェースと抽象クラスの違い
/*インターフェースも抽象クラスも、具体的な処理内容を記述しないという点では似ているが、概念に違いがある。
　インターフェースは共通のふるまいを定義するものなので、全く種類の異なるオブジェクトに対して使うことができる。
　先ほどの「飛ぶ」インターフェースは鳥だけでなく飛行機や風船など、オブジェクトとしては全く異なるものに対して使うことができる。
　一方、抽象クラスは共通のグループに属するオブジェクトに異対して使う。抽象メソッド「飛ぶ」を持つ鳥クラス(抽象クラス)を継承できるのはハトやインコなど、
　あくまでも鳥に限られる。飛ぶメソッドを持たせたいからといって、鳥クラスを継承して飛行機や風船クラスを作るのは適切ではない。*/
//ふるまいが同じであれば同じインターフェースを実装できる
//抽象クラスは同種のオブジェクトがもつ共通のふるまいを定義できる。

//インターフェースによる型注釈
//インターフェースには、メソッドだけでなくプロパティを定義することもできる。次のコードは飲料がもつプロパティを定義したインターフェースである。
interface IDrink{
    name:string;//名前
    amount:number;//分量
}
//また、インターフェースはimplementsでクラスに実装する以外にも、型注釈として使うことができる。

//水を生成する関数
function createWater():IDrink{
    return{
        name:"水",
        amount:1000,
    };
}
//生成した水をIDrink型に代入
const water:IDrink = createWater();

//メソッドを持たないのであれば、型エイリアスも代用できる。
type Drink = {
    name:string;//名前
    amount:number;//分量
}

//動作確認
console.log(water);