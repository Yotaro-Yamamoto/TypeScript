//Animalという名前の機能(クラス)を読み込む
//import { Animal } from "./class/animal.js";
//let Animal="猫";//同じ名前の変数が存在するのでエラー

/*エラーになる理由は、最初からapp.tsに次のように記述しているのと実質的に同じだからである。
class Animal{...}
let Animal='猫';*/

/*クラスや関数の名前には一般的な単語が使われることが多いので、名前の衝突はよくあることである。
　かといって、animal.tsのexport文を書き換えてしまうと、このモジュールを利用しているモジュールが
　他にもあった場合、そのモジュールのimport文も変更しなければならず、影響が広範囲に及ぶ。
　このような名前の衝突を回避できるように、公開されている名前を別の名前に変えてインポートする方法が
　用意されている。export文の別名と同じように、asを使う。*/
/*書式
import {機能名 as 別名} from "モジュールのパス";*/
//複数の機能をまとめてインポートする場合は、別名にしたいものだけasを使う
/*書式
import {機能名1 as 別名, 機能名2} from "モジュールのパス";*/

//別名を使ってさきほどのエラーを解消してみよう。
//AnimalをCreatureという別名でインポート
import { Animal as Creature } from "./class/animal.js";
let Animal = "猫";//エラーにならない
const cat = new Creature();
//別名のおかげで、インポート側のモジュール作成者は自由に名前を付けなおすことができる。
